package net.codejava.upload;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.*;

/**@author Nguyen, Truong Thanh
 * @author 1009851 <p>
 * This class is build with the help of BufferedImage.TYPE_INT_RGB and Graphics2D  
 * The project used library of Java "java.awt.image.BufferedImage" to take the image as BufferedImage
 * Draw x,y coordinates for histogram panel
 * input is values which generated by Histogram
 * From the input draw the bar chart with width = 2 and b height = value on x,y coordinate
 */
public class DrawHistogram extends JPanel {
  private int[] values;

  private String title;
  
  private File imageFile;
  private  BufferedImage HSimage;
  
  private int color;
  // x-axis coord constants
  public static final int X_AXIS_FIRST_X_COORD = 50;
  public static final int X_AXIS_SECOND_X_COORD = 600;
  public static final int X_AXIS_Y_COORD = 600;
  
  // y-axis coord constants
  public static final int Y_AXIS_FIRST_Y_COORD = 50;
  public static final int Y_AXIS_SECOND_Y_COORD = 600;
  public static final int Y_AXIS_X_COORD = 50;
  
  //arrows of axis are represented with "hipotenuse" of 
  //triangle
  // now we are define length of cathetas of that triangle
  public static final int FIRST_LENGHT = 10;
  public static final int SECOND_LENGHT = 5;
  
  // size of start coordinate lenght
  public static final int ORIGIN_COORDINATE_LENGHT = 6;
  
  // distance of coordinate strings from axis
  public static final int AXIS_STRING_DISTANCE = 20;
  
  /**
   @param v
   @param t
   @param c
   */
  public DrawHistogram(int[] v,String t, int c) {
    
    values = v;
    title = t;
    color = c;
  }
  /**
  Get image file from UploadServlet class
  */
  public void getImage (File file)
  {
	  imageFile = file;
  }
  /**
  Draw x,y coordinate
  Fill color and draw bar chart for value get form histogram class
  */
  private void drawImage()
  {
	  int width = 700, height = 700;

      // TYPE_INT_ARGB specifies the image format: 8-bit RGBA packed
      // into integer pixels
      
	  BufferedImage bi2 = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	  Graphics2D g = bi2.createGraphics();
	  
	 
      
	  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
		      RenderingHints.VALUE_ANTIALIAS_ON);
		    
		    /** x-axis parameter*/ 
		    g.drawLine(X_AXIS_FIRST_X_COORD, X_AXIS_Y_COORD,
		       X_AXIS_SECOND_X_COORD, X_AXIS_Y_COORD);
		    /** y-axis parameter*/
		    g.drawLine(Y_AXIS_X_COORD, Y_AXIS_FIRST_Y_COORD,
		       Y_AXIS_X_COORD, Y_AXIS_SECOND_Y_COORD);
		    
		    /** x-axis arrow*/
		    g.drawLine(X_AXIS_SECOND_X_COORD - FIRST_LENGHT,
		       X_AXIS_Y_COORD - SECOND_LENGHT,
		       X_AXIS_SECOND_X_COORD, X_AXIS_Y_COORD);
		    g.drawLine(X_AXIS_SECOND_X_COORD - FIRST_LENGHT,
		      X_AXIS_Y_COORD + SECOND_LENGHT,
		      X_AXIS_SECOND_X_COORD, X_AXIS_Y_COORD);
		    
		    /** y-axis arrow*/
		    g.drawLine(Y_AXIS_X_COORD - SECOND_LENGHT,
		       Y_AXIS_FIRST_Y_COORD + FIRST_LENGHT,
		       Y_AXIS_X_COORD, Y_AXIS_FIRST_Y_COORD);
		    g.drawLine(Y_AXIS_X_COORD + SECOND_LENGHT, 
		       Y_AXIS_FIRST_Y_COORD + FIRST_LENGHT,
		       Y_AXIS_X_COORD, Y_AXIS_FIRST_Y_COORD);
		    
		    // draw origin Point
		    g.fillOval(
		      X_AXIS_FIRST_X_COORD - (ORIGIN_COORDINATE_LENGHT / 2), 
		      Y_AXIS_SECOND_Y_COORD - (ORIGIN_COORDINATE_LENGHT / 2),
		      ORIGIN_COORDINATE_LENGHT, ORIGIN_COORDINATE_LENGHT);
		    
		    // draw text "X" and draw text "Y"
		    g.drawString("X", X_AXIS_SECOND_X_COORD - AXIS_STRING_DISTANCE / 2,
		       X_AXIS_Y_COORD + AXIS_STRING_DISTANCE);
		    g.drawString("Y", Y_AXIS_X_COORD - AXIS_STRING_DISTANCE,
		       Y_AXIS_FIRST_Y_COORD + AXIS_STRING_DISTANCE / 2);
		    g.drawString("(0, 0)", X_AXIS_FIRST_X_COORD - AXIS_STRING_DISTANCE,
		       Y_AXIS_SECOND_Y_COORD + AXIS_STRING_DISTANCE);
		    
		    // numerate axis
		    int xCoordNumbers = 100;
		    int yCoordNumbers = 100;
		    int xLength = (X_AXIS_SECOND_X_COORD - X_AXIS_FIRST_X_COORD)
		        / xCoordNumbers;
		    int yLength = (Y_AXIS_SECOND_Y_COORD - Y_AXIS_FIRST_Y_COORD)
		        / yCoordNumbers;
		    
		    // draw x-axis numbers
		    for(int i = 0; i < xCoordNumbers; i+=10) {
		     g.drawLine(X_AXIS_FIRST_X_COORD + (i * xLength),
		       X_AXIS_Y_COORD - SECOND_LENGHT,
		       X_AXIS_FIRST_X_COORD + (i * xLength),
		       X_AXIS_Y_COORD + SECOND_LENGHT);
		     g.drawString(Integer.toString(i), 
		       X_AXIS_FIRST_X_COORD + (i * xLength) - 3,
		       X_AXIS_Y_COORD + AXIS_STRING_DISTANCE);
		    }
		    
		    //draw y-axis numbers
		    for(int i = 0; i < yCoordNumbers; i+=10) {
		     g.drawLine(Y_AXIS_X_COORD - SECOND_LENGHT,
		       Y_AXIS_SECOND_Y_COORD - (i * yLength), 
		       Y_AXIS_X_COORD + SECOND_LENGHT,
		       Y_AXIS_SECOND_Y_COORD - (i * yLength));
		     g.drawString(Integer.toString(i), 
		       Y_AXIS_X_COORD - AXIS_STRING_DISTANCE, 
		       Y_AXIS_SECOND_Y_COORD - (i * yLength));
		    }   
	  if (values == null || values.length == 0)
	      return;
	    double minValue = 0;
	    double maxValue = 0;
	    for (int i1 = 0; i1 < values.length; i1++) {
	      if (minValue > values[i1])
	        minValue = values[i1];
	      if (maxValue < values[i1])
	        maxValue = values[i1];
	    }
	    
	  int barWidth = 2;
	  int clientWidth = 700;
	  int clientHeight = 700;
	  /**set title Font*/
	    Font titleFont = new Font("SansSerif", Font.BOLD, 20);
	    FontMetrics titleFontMetrics = g.getFontMetrics(titleFont);
	    Font labelFont = new Font("SansSerif", Font.PLAIN, 10);
	    FontMetrics labelFontMetrics = g.getFontMetrics(labelFont);
	    /**draw title*/
	    int titleWidth = titleFontMetrics.stringWidth(title);
	    int y = titleFontMetrics.getAscent();
	    int x = (clientWidth - titleWidth) / 2;
	    g.setFont(titleFont);
	    g.drawString(title, x, y);
	    
	    int top = titleFontMetrics.getHeight();
	    int bottom = labelFontMetrics.getHeight();
	    if (maxValue == minValue)
	        return;
	      double scale = (clientHeight - top - bottom) / (maxValue - minValue);
	      y = clientHeight - labelFontMetrics.getDescent();
	      g.setFont(labelFont);
	      /**Fill color and draw panel*/
	  for (int i1 = 0; i1 < values.length; i1++) {
	      int valueX = i1 * barWidth + 1;
	      int valueY = top;
	      int height1 = (int) (values[i1] * scale);
	      if (values[i1] >= 0)
	        valueY += (int) ((maxValue - values[i1]) * scale);
	      else {
	        valueY += (int) (maxValue * scale);
	        height1 = -height1;
	      }

	    /**set color for Histogram Pannel*/
	      if(color==0)
	      {
	      g.setColor(Color.cyan);				
	      }
	      else if(color==1)
	      {
	    	  g.setColor(Color.magenta);
	      }
	      else if(color==2)
	      {
	    	  g.setColor(Color.yellow);
	      }
	      /**Fill color and draw panel*/
	      g.fillRect(valueX+50, valueY-87, barWidth, height1); 
	      g.setColor(Color.black);
	      g.drawRect(valueX+50, valueY-87, barWidth, height1); 
	    }
      
      HSimage = bi2;
		    }
         /**Save image as .jpg file
          * Execute by cp.saveImage in class UploadServlet.java */
  
  public void saveImage() {
	  drawImage();
	    try {
	        ImageIO.write(HSimage, "jpg",imageFile );
	        System.out.println("panel saved as image");

	    } catch (Exception e) {
	        System.out.println("panel not saved" + e.getMessage());
	    }
	}
}
